plugins {
    id "io.opentelemetry.instrumentation.muzzle-generation"
    id "io.opentelemetry.instrumentation.muzzle-check"
    id "maven-publish"
    id "java"
}

apply from: "$rootDir/gradle/instrumentation.gradle"

dependencies {
    implementation(project(":instrumentation:kafka-common"))
    compileOnly("org.apache.kafka:connect-api:${versions.kafka}")
    compileOnly("org.slf4j:slf4j-api:${versions.slf4j}")
    compileOnly("org.apache.kafka:connect-runtime:${versions.kafka}") {
                exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    }
    implementation("org.slf4j:log4j-over-slf4j:2.0.5")

    compileOnly("io.opentelemetry:opentelemetry-sdk-extension-autoconfigure-spi:${versions.opentelemetry}")

    implementation("com.fasterxml.jackson.core:jackson-databind:${versions.jackson}")
    implementation("com.fasterxml.jackson.core:jackson-core:${versions.jackson}")
    implementation("com.fasterxml.jackson.core:jackson-annotations:${versions.jackson}")

    add("codegen", "io.opentelemetry.javaagent:opentelemetry-javaagent-tooling:${versions.opentelemetryJavaagentAlpha}")
    add("codegen", "ch.qos.logback:logback-classic:${versions.logback}")
    add("muzzleBootstrap", "io.opentelemetry.instrumentation:opentelemetry-instrumentation-api-annotation-support:${versions.opentelemetryJavaagentAlpha}")
    add("muzzleBootstrap", "io.opentelemetry.javaagent:opentelemetry-javaagent-instrumentation-api:${versions.opentelemetryJavaagentAlpha}")
    add("muzzleTooling", "io.opentelemetry.javaagent:opentelemetry-javaagent-extension-api:${versions.opentelemetryJavaagentAlpha}")
    add("muzzleTooling", "io.opentelemetry.javaagent:opentelemetry-javaagent-tooling:${versions.opentelemetryJavaagentAlpha}")

    //test dependencies
    testInstrumentation "io.opentelemetry.javaagent.instrumentation:opentelemetry-javaagent-kafka-clients-0.11:${versions.opentelemetryJavaagentAlpha}"
    testInstrumentation(project(":instrumentation:kafka-clients"))
    testInstrumentation(project(":instrumentation:kafka-common"))

    testImplementation("org.testcontainers:kafka:${versions.testContainersKafka}")
    testImplementation("org.apache.kafka:kafka-clients:${versions.kafka}")

    testImplementation("org.awaitility:awaitility:${versions.awaitility}")
    testImplementation("org.apache.kafka:connect-runtime:${versions.kafka}") {
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    }
    testImplementation("org.apache.kafka:kafka-tools:${versions.kafka}"){
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    }
    testImplementation("org.apache.commons:commons-lang3:${versions.apacheCommons3}")

    testImplementation("com.squareup.okhttp3:okhttp:3.12.12")
    testImplementation("com.fasterxml.jackson.core:jackson-databind:${versions.jackson}")
    testImplementation("com.google.protobuf:protobuf-java-util:3.12.4")
    testImplementation("io.opentelemetry:opentelemetry-api:${versions.opentelemetry}")
    testImplementation("io.opentelemetry.proto:opentelemetry-proto:${versions.opentelemetryProto}")
}
/**
 * Downloads open telemetry agent using the version specified in the project's gradle.properties file.
 * This is used to by smoke tests.
 */
def downloadOTelAgent() {
    def src = "https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/download/v${versions.opentelemetryJavaagent}/opentelemetry-javaagent.jar"
    def destDir = "$projectDir/src/test/resources"
    def destFile = "$destDir/opentelemetry-javaagent.jarfile"
    def sourceUrl = new URL(src)
    def file = new File(destFile)
    if (file.exists()) {
        println "file $destFile already exists, skipping download"
    } else {
        mkdir "$destDir"
        println "Downloading $destFile from $sourceUrl..."
        sourceUrl.withInputStream { i -> file.withOutputStream { it << i } }
    }

}

task testsWithNoPropagation(type: Test) {
    configure { task ->
        setupUnitTests(task)
    }
    useJUnitPlatform {
        includeTags "DISABLE_PROPAGATION"
    }
    jvmArgs("-Dotel.instrumentation.kafka.client-propagation.enabled=false")
}

task unitTests(type: Test) {
    configure { task ->
        setupUnitTests(task)
    }
    useJUnitPlatform {
        excludeTags "DISABLE_PROPAGATION"
    }
    filter {
        excludeTestsMatching("*.smoke.*")
        setFailOnNoMatchingTests(false)
    }
    jvmArgs("-Dotel.instrumentation.kafka.client-propagation.enabled=true")
    mustRunAfter(testsWithNoPropagation)
}

task smokeTests(type: Test) {
    downloadOTelAgent()
    configure { task ->
        setupSmokeTests(task)
    }
    useJUnitPlatform()
    filter {
        includeTestsMatching("*.smoke.*")
        setFailOnNoMatchingTests(false)
    }
    mustRunAfter(unitTests)
}

test {
    dependsOn(smokeTests, unitTests, testsWithNoPropagation)
    useJUnitPlatform()
    filter {
        includeTestsMatching("dummyfilter")
        setFailOnNoMatchingTests(false)
    }
    mustRunAfter(smokeTests)
}

def muzzleVersions = ext.versions

muzzle {
    pass {
        group.set("org.apache.kafka")
        module.set("kafka-connect")
        versions.set("[3.0.1,)")
        assertInverse.set(true)
        extraDependency("com.fasterxml.jackson.core:jackson-databind:${muzzleVersions["jackson"]}")
        extraDependency("com.fasterxml.jackson.core:jackson-core:${muzzleVersions["jackson"]}")
        extraDependency("com.fasterxml.jackson.core:jackson-annotations:${muzzleVersions["jackson"]}")
        extraDependency("io.opentelemetry.javaagent:opentelemetry-javaagent:${muzzleVersions.opentelemetryJavaagent}")
    }
}

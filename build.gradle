plugins {
    id "java"
    id "maven-publish"
    /*
    Instrumentation agent extension mechanism expects a single jar containing everything required
    for your extension. This also includes any external libraries that your extension uses and
    cannot access from application classpath (see comment below about `javax.servlet-api` dependency).

    Thus we use Shadow Gradle plugin to package our classes and all required runtime dependencies
    into a single jar.
    See https://imperceptiblethoughts.com/shadow/ for more details about Shadow plugin.
     */
    id "com.github.johnrengelman.shadow" version "7.1.2"

    id "io.opentelemetry.instrumentation.muzzle-generation" version "1.13.0-alpha"
    id "io.opentelemetry.instrumentation.muzzle-check" version "1.13.0-alpha"
}

ext {
    /*
      First preference to project properties - -P command line override, local gradle.properties
      file, global gradle.properties file.
      Second preference - system properties 'org.gradle.project.maven...' - as those are set by init
      script in CI builds.
      Gradle docs specify that system properties with keys like 'org.gradle.project.foo' should automatically
      resolve and set corresponding project.foo property - but that doesn't seem to be true / working
      therefore reading system properties explicitly below.
    */

    //Maven publish repo URL
    //check project prop and use if set
    mavenUrl = project.hasProperty('mavenUrl') ? project.mavenUrl
            //check system prop and use if set
            : (System.properties.containsKey('org.gradle.project.mavenUrl') ? System.getProperty("org.gradle.project.mavenUrl")
            //initialize to empty string if neither of the above properties are populated
            : '')

    //Maven publish repo Username
    //check project prop and use if set
    mavenUsername = project.hasProperty('mavenUsername') ? project.mavenUsername
            //check system prop and use if set
            : (System.properties.containsKey('org.gradle.project.mavenUsername') ? System.getProperty('org.gradle.project.mavenUsername')
            //initialize to empty string if neither of the above properties are populated
            : '')

    //Maven publish repo Password
    //check project prop and use if set
    mavenPassword = project.hasProperty('mavenPassword') ? project.mavenPassword
            //check system prop and use if set
            : (System.properties.containsKey('org.gradle.project.mavenPassword') ? System.getProperty('org.gradle.project.mavenPassword')
            //initialize to empty string if neither of the above properties are populated
            : '')
}

subprojects {
    version = rootProject.version

    apply plugin: "java"

    ext {
        versions = [
                opentelemetry              : "1.13.0",
                opentelemetryAlpha         : "1.13.0-alpha",
                opentelemetryJavaagent     : "1.13.0",
                opentelemetryJavaagentAlpha: "1.13.0-alpha",
                opentelemetryProto         : "0.13.0-alpha",
                bytebuddy                  : "1.10.19",
                guava                      : "30.1-jre",
                jackson                    : "2.12.3",
                jsonFlattener              : "0.12.0",
                jsonBase                   : "2.0.0",
                kafka                      : "3.0.1",
                testContainersKafka        : "1.16.2",
                assertj                    : "3.19.0",
                awaitility                 : "4.1.1",
                lombok                     : "1.18.22",
                logback                    : "1.2.3",
                apacheCommons3             : "3.12.0",
                slf4j                      : "1.7.36"
        ]

        deps = [
                bytebuddy           : [
                        "net.bytebuddy:byte-buddy-dep:${versions.bytebuddy}",

                ],
                autoservice         : [
                        "com.google.auto.service:auto-service:1.0-rc7",
                        "com.google.auto:auto-common:0.8",
                        "com.google.guava:guava:${versions.guava}",
                ],
                autoValueAnnotations: "com.google.auto.value:auto-value-annotations:${versions.autoValue}",
        ]
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }


    repositories {
        mavenCentral()
        mavenLocal()
        maven {
            name = "sonatype"
            url = uri("https://oss.sonatype.org/content/repositories/snapshots")
        }
    }

    dependencies {
        testImplementation("org.mockito:mockito-core:3.3.3")
        testImplementation("org.junit.jupiter:junit-jupiter-api:5.6.2")
        testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.6.2")
        implementation platform('com.amazonaws:aws-java-sdk-bom:1.11.1000')
        implementation 'com.amazonaws:aws-java-sdk-s3'
    }
    def publishToS3Profile='publish-to-s3'

    if (project.hasProperty('publish-to-s3')) {
        // Used for production environment
        propertyDrivenProfiles = publishToS3Profile
        apply from: rootProject.file('.semaphore/publish-to-s3.yml');
        publishing {
            repositories {
                maven {
                    name = "confluent-csid-repo"
                    def releasesRepoUrl = "s3://confluent-csid-maven/releases/"
                    def snapshotsRepoUrl = "s3://confluent-csid-maven/snapshots/"
                    url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                }
            }
        }
    }

    tasks {
        test {
            useJUnitPlatform()
        }

        compileJava {
            options.release.set(11)
        }
    }
}

project("instrumentation") {
    archivesBaseName = "lineage-opentel-extensions"
}
project("instrumentation:kafka-common") {
    archivesBaseName = "kafka-common-lineage-extension"
}
project("instrumentation:kafka-clients") {
    archivesBaseName = "kafka-clients-lineage-extension"
}
project("instrumentation:kafka-streams") {
    archivesBaseName = "kafka-streams-lineage-extension"
}
